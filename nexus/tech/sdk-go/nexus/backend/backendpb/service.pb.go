// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.19.1
// source: nexus/backend/v1/service.proto

package backendpb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OperationType int32

const (
	OperationType_OPERATION_TYPE_UNSPECIFIED OperationType = 0
	OperationType_NORMAL                     OperationType = 1
	OperationType_ALO                        OperationType = 2
)

// Enum value maps for OperationType.
var (
	OperationType_name = map[int32]string{
		0: "OPERATION_TYPE_UNSPECIFIED",
		1: "NORMAL",
		2: "ALO",
	}
	OperationType_value = map[string]int32{
		"OPERATION_TYPE_UNSPECIFIED": 0,
		"NORMAL":                     1,
		"ALO":                        2,
	}
)

func (x OperationType) Enum() *OperationType {
	p := new(OperationType)
	*p = x
	return p
}

func (x OperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_nexus_backend_v1_service_proto_enumTypes[0].Descriptor()
}

func (OperationType) Type() protoreflect.EnumType {
	return &file_nexus_backend_v1_service_proto_enumTypes[0]
}

func (x OperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperationType.Descriptor instead.
func (OperationType) EnumDescriptor() ([]byte, []int) {
	return file_nexus_backend_v1_service_proto_rawDescGZIP(), []int{0}
}

type CallResponse_Success_ResponseType int32

const (
	CallResponse_Success_RESPONSE_TYPE_UNSPECIFIED CallResponse_Success_ResponseType = 0
	CallResponse_Success_ALO_INFO                  CallResponse_Success_ResponseType = 1
)

// Enum value maps for CallResponse_Success_ResponseType.
var (
	CallResponse_Success_ResponseType_name = map[int32]string{
		0: "RESPONSE_TYPE_UNSPECIFIED",
		1: "ALO_INFO",
	}
	CallResponse_Success_ResponseType_value = map[string]int32{
		"RESPONSE_TYPE_UNSPECIFIED": 0,
		"ALO_INFO":                  1,
	}
)

func (x CallResponse_Success_ResponseType) Enum() *CallResponse_Success_ResponseType {
	p := new(CallResponse_Success_ResponseType)
	*p = x
	return p
}

func (x CallResponse_Success_ResponseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CallResponse_Success_ResponseType) Descriptor() protoreflect.EnumDescriptor {
	return file_nexus_backend_v1_service_proto_enumTypes[1].Descriptor()
}

func (CallResponse_Success_ResponseType) Type() protoreflect.EnumType {
	return &file_nexus_backend_v1_service_proto_enumTypes[1]
}

func (x CallResponse_Success_ResponseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CallResponse_Success_ResponseType.Descriptor instead.
func (CallResponse_Success_ResponseType) EnumDescriptor() ([]byte, []int) {
	return file_nexus_backend_v1_service_proto_rawDescGZIP(), []int{6, 1, 0}
}

type UpdateServicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set of services to create or update.
	Services []*Service `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
	// If set, the set of services to remove. Cannot have values if replace is
	// true. The update will fail if this includes a service that does not exist.
	RemoveServices []string `protobuf:"bytes,2,rep,name=remove_services,json=removeServices,proto3" json:"remove_services,omitempty"`
	// If true, will replace all existing services with given services. Cannot be
	// true if remove_services has values.
	//
	// NOTES:
	// * Yes this is technically a scary operation to be able to replace your
	//   services and therefore accidentally delete one. But this is an API, one
	//   would expect a UI/CLI to guard the user more. This simple
	//   single-rpc-mutation API is preferred over multiple mutation methods.
	// * Do we want a conflict_token that is returned in GetServicesResponse for
	//   atomic mutations?
	Replace bool `protobuf:"varint,3,opt,name=replace,proto3" json:"replace,omitempty"`
}

func (x *UpdateServicesRequest) Reset() {
	*x = UpdateServicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexus_backend_v1_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServicesRequest) ProtoMessage() {}

func (x *UpdateServicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nexus_backend_v1_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServicesRequest.ProtoReflect.Descriptor instead.
func (*UpdateServicesRequest) Descriptor() ([]byte, []int) {
	return file_nexus_backend_v1_service_proto_rawDescGZIP(), []int{0}
}

func (x *UpdateServicesRequest) GetServices() []*Service {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *UpdateServicesRequest) GetRemoveServices() []string {
	if x != nil {
		return x.RemoveServices
	}
	return nil
}

func (x *UpdateServicesRequest) GetReplace() bool {
	if x != nil {
		return x.Replace
	}
	return false
}

type UpdateServicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set of created/updated services. Does not include deleted ones.
	Services []*Service `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
}

func (x *UpdateServicesResponse) Reset() {
	*x = UpdateServicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexus_backend_v1_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServicesResponse) ProtoMessage() {}

func (x *UpdateServicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nexus_backend_v1_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServicesResponse.ProtoReflect.Descriptor instead.
func (*UpdateServicesResponse) Descriptor() ([]byte, []int) {
	return file_nexus_backend_v1_service_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateServicesResponse) GetServices() []*Service {
	if x != nil {
		return x.Services
	}
	return nil
}

type GetServicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetServicesRequest) Reset() {
	*x = GetServicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexus_backend_v1_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServicesRequest) ProtoMessage() {}

func (x *GetServicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nexus_backend_v1_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServicesRequest.ProtoReflect.Descriptor instead.
func (*GetServicesRequest) Descriptor() ([]byte, []int) {
	return file_nexus_backend_v1_service_proto_rawDescGZIP(), []int{2}
}

type GetServicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Services []*Service `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
}

func (x *GetServicesResponse) Reset() {
	*x = GetServicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexus_backend_v1_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServicesResponse) ProtoMessage() {}

func (x *GetServicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nexus_backend_v1_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServicesResponse.ProtoReflect.Descriptor instead.
func (*GetServicesResponse) Descriptor() ([]byte, []int) {
	return file_nexus_backend_v1_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetServicesResponse) GetServices() []*Service {
	if x != nil {
		return x.Services
	}
	return nil
}

// Values that can be added to each metadata key in the call or response.
//
// NOTES:
// * This is analogous to HTTP headers (and will map to them when we do the HTTP
//   protocol) which is why it's a set of repeated values.
type MetadataValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *MetadataValues) Reset() {
	*x = MetadataValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexus_backend_v1_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetadataValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataValues) ProtoMessage() {}

func (x *MetadataValues) ProtoReflect() protoreflect.Message {
	mi := &file_nexus_backend_v1_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataValues.ProtoReflect.Descriptor instead.
func (*MetadataValues) Descriptor() ([]byte, []int) {
	return file_nexus_backend_v1_service_proto_rawDescGZIP(), []int{4}
}

func (x *MetadataValues) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type CallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique, client-supplied identifier for the request. This should be unique
	// for both the caller and the receiver.
	//
	// NOTES:
	// * So, say in a scenario where a user isn't using some good global
	//   uniqueness. Can a completely separate caller use the same request
	//   identifier to cause clash? Ideally, for security purposes each
	//   authenticated caller org is isolated from the other, so the onus is on
	//   the server to qualify this.
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Service this call is for.
	//
	// NOTES:
	// * For HTTP this is part of the URL most likely.
	// * For Temporal workflow commands/events this is just a simple name, but for
	//   direct calling clients this is much more than just a name, it is an
	//   endpoint and may need to carry auth in the future. Should we break this
	//   out into a type? Should we stop reusing this CallRequest on the Temporal
	//   side which only needs a simple string?
	Service string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	// Metadata for the operation.
	//
	// NOTES:
	// * For HTTP these are headers. This will include the HTTP2 headers :method,
	//   :scheme, :authority, and :path for all HTTP calls.
	Metadata map[string]*MetadataValues `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Operation for this call. By convention these are slash-delimited to
	// represent any kind of hierarchy. Some operations are special:
	//
	// * <alo-operation> - Start ALO, input can be anything, response is always
	//   AloInfo.
	// * <alo-operation>/cancel - Cancel ALO, input must be AloRef, response has
	//   no output.
	// * <alo-operation>/get - Get ALO, input must be AloRef, response is always
	//   AloInfo.
	// * <alo-operation>/wait - Wait for ALO completion, input must be AloRef,
	//   successful response is CallResponse. This can be a long-poll operation
	//   and callers are expected to re-wait if the connection is severed.
	//
	// NOTES:
	// * For HTTP this is part of the URL most likely.
	// * Yes, "<alo-operation>" means that any call _could_ be an ALO, but maybe
	//   not. This poses many challenges on the user. Are we ok with this?
	// * <alo-operation>/wait is the only reason to support long-polling in all of
	//   Nexus. Do we want to make that (or ALO calls in general) more explicit?
	Operation string `protobuf:"bytes,4,opt,name=operation,proto3" json:"operation,omitempty"`
	// Input for the operation.
	//
	// NOTES:
	// * For HTTP, this is the body.
	// * We are not handling large, streaming inputs at this time (e.g. streaming
	//   a file upload).
	Input []byte `protobuf:"bytes,5,opt,name=input,proto3" json:"input,omitempty"`
	// If set and the operation is an ALO (i.e. the response type is ALO_INFO),
	// this is the callback invoked upon completion. If the operation is not an
	// ALO this value is ignored.
	AloCompletionCallback *CallRequest_CompletionCallback `protobuf:"bytes,6,opt,name=alo_completion_callback,json=aloCompletionCallback,proto3" json:"alo_completion_callback,omitempty"`
}

func (x *CallRequest) Reset() {
	*x = CallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexus_backend_v1_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallRequest) ProtoMessage() {}

func (x *CallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nexus_backend_v1_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallRequest.ProtoReflect.Descriptor instead.
func (*CallRequest) Descriptor() ([]byte, []int) {
	return file_nexus_backend_v1_service_proto_rawDescGZIP(), []int{5}
}

func (x *CallRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CallRequest) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *CallRequest) GetMetadata() map[string]*MetadataValues {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CallRequest) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *CallRequest) GetInput() []byte {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *CallRequest) GetAloCompletionCallback() *CallRequest_CompletionCallback {
	if x != nil {
		return x.AloCompletionCallback
	}
	return nil
}

type CallResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Same unique identifier provided on the request.
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Metadata for the operation.
	//
	// NOTES:
	// * For HTTP these are headers. This will include the HTTP2 header :status
	//   for all HTTP calls.
	// * Is there somewhere we want to define an "encoding" for success/failure
	//   output types?
	Metadata map[string]*MetadataValues `protobuf:"bytes,2,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Types that are assignable to Response:
	//	*CallResponse_Success_
	//	*CallResponse_Failure_
	Response isCallResponse_Response `protobuf_oneof:"response"`
}

func (x *CallResponse) Reset() {
	*x = CallResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexus_backend_v1_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallResponse) ProtoMessage() {}

func (x *CallResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nexus_backend_v1_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallResponse.ProtoReflect.Descriptor instead.
func (*CallResponse) Descriptor() ([]byte, []int) {
	return file_nexus_backend_v1_service_proto_rawDescGZIP(), []int{6}
}

func (x *CallResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CallResponse) GetMetadata() map[string]*MetadataValues {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (m *CallResponse) GetResponse() isCallResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *CallResponse) GetSuccess() *CallResponse_Success {
	if x, ok := x.GetResponse().(*CallResponse_Success_); ok {
		return x.Success
	}
	return nil
}

func (x *CallResponse) GetFailure() *CallResponse_Failure {
	if x, ok := x.GetResponse().(*CallResponse_Failure_); ok {
		return x.Failure
	}
	return nil
}

type isCallResponse_Response interface {
	isCallResponse_Response()
}

type CallResponse_Success_ struct {
	Success *CallResponse_Success `protobuf:"bytes,3,opt,name=success,proto3,oneof"`
}

type CallResponse_Failure_ struct {
	// Failure of a call. This is NOT validation or eager failure, but rather
	// failure of the underlying implementation.
	//
	// For non-ALO calls and ALO starts, this should probably never be used but
	// instead a gRPC failure should be returned (but clients must be prepared
	// to handle this like a gRPC failure if present).
	//
	// For ALO call completions, this failure is returned from a long-poll wait
	// or sent via callback.
	Failure *CallResponse_Failure `protobuf:"bytes,4,opt,name=failure,proto3,oneof"`
}

func (*CallResponse_Success_) isCallResponse_Response() {}

func (*CallResponse_Failure_) isCallResponse_Response() {}

type PollNexusRequestQueueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Services the caller can accept requests for.
	//
	// NOTES:
	// * This is intentionally not a single service like Temporal has single task
	//   queue which is too limiting.
	// * The reason Service is a message and not just a name is so we can add
	//   things like priority, server labels patterns, operation filters, etc in
	//   the future. This is much more robust than Temporal's current approach.
	Services []*PollNexusRequestQueueRequest_ServiceMatch `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
	// Metadata for the poll request.
	//
	// NOTES:
	// * This can include identity, versions, arbitrary labels for server-side
	//   matching, whatever.
	Metadata map[string]*MetadataValues `protobuf:"bytes,2,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PollNexusRequestQueueRequest) Reset() {
	*x = PollNexusRequestQueueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexus_backend_v1_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollNexusRequestQueueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollNexusRequestQueueRequest) ProtoMessage() {}

func (x *PollNexusRequestQueueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nexus_backend_v1_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollNexusRequestQueueRequest.ProtoReflect.Descriptor instead.
func (*PollNexusRequestQueueRequest) Descriptor() ([]byte, []int) {
	return file_nexus_backend_v1_service_proto_rawDescGZIP(), []int{7}
}

func (x *PollNexusRequestQueueRequest) GetServices() []*PollNexusRequestQueueRequest_ServiceMatch {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *PollNexusRequestQueueRequest) GetMetadata() map[string]*MetadataValues {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type PollNexusRequestQueueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Call request.
	//
	// NOTES:
	// * While we technically could get rid of this response message and just use
	//   CallRequest as response from the RPC, it's not good practice and does not
	//   allow for future expansion of just this response.
	Request *CallRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *PollNexusRequestQueueResponse) Reset() {
	*x = PollNexusRequestQueueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexus_backend_v1_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollNexusRequestQueueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollNexusRequestQueueResponse) ProtoMessage() {}

func (x *PollNexusRequestQueueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nexus_backend_v1_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollNexusRequestQueueResponse.ProtoReflect.Descriptor instead.
func (*PollNexusRequestQueueResponse) Descriptor() ([]byte, []int) {
	return file_nexus_backend_v1_service_proto_rawDescGZIP(), []int{8}
}

func (x *PollNexusRequestQueueResponse) GetRequest() *CallRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type RespondNexusRequestCompletedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Call response.
	//
	// NOTES:
	// * While we technically could get rid of this completed message and just use
	//   CallResponse as request from the RPC, it's not good practice and does not
	//   allow for future expansion of just this request.
	Response *CallResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *RespondNexusRequestCompletedRequest) Reset() {
	*x = RespondNexusRequestCompletedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexus_backend_v1_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondNexusRequestCompletedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondNexusRequestCompletedRequest) ProtoMessage() {}

func (x *RespondNexusRequestCompletedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nexus_backend_v1_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondNexusRequestCompletedRequest.ProtoReflect.Descriptor instead.
func (*RespondNexusRequestCompletedRequest) Descriptor() ([]byte, []int) {
	return file_nexus_backend_v1_service_proto_rawDescGZIP(), []int{9}
}

func (x *RespondNexusRequestCompletedRequest) GetResponse() *CallResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

type RespondNexusRequestCompletedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RespondNexusRequestCompletedResponse) Reset() {
	*x = RespondNexusRequestCompletedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexus_backend_v1_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespondNexusRequestCompletedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespondNexusRequestCompletedResponse) ProtoMessage() {}

func (x *RespondNexusRequestCompletedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nexus_backend_v1_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespondNexusRequestCompletedResponse.ProtoReflect.Descriptor instead.
func (*RespondNexusRequestCompletedResponse) Descriptor() ([]byte, []int) {
	return file_nexus_backend_v1_service_proto_rawDescGZIP(), []int{10}
}

type CallRequest_CompletionCallback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Callback to invoke on ALO completion.
	//
	// NOTES:
	// * Don't need this oneof now (moving top-level into oneof is a backwards
	//   compatible operation), it's just to show we can have other callback
	//   approaches.
	//
	// Types that are assignable to Callback:
	//	*CallRequest_CompletionCallback_Http_
	Callback isCallRequest_CompletionCallback_Callback `protobuf_oneof:"callback"`
}

func (x *CallRequest_CompletionCallback) Reset() {
	*x = CallRequest_CompletionCallback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexus_backend_v1_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallRequest_CompletionCallback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallRequest_CompletionCallback) ProtoMessage() {}

func (x *CallRequest_CompletionCallback) ProtoReflect() protoreflect.Message {
	mi := &file_nexus_backend_v1_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallRequest_CompletionCallback.ProtoReflect.Descriptor instead.
func (*CallRequest_CompletionCallback) Descriptor() ([]byte, []int) {
	return file_nexus_backend_v1_service_proto_rawDescGZIP(), []int{5, 1}
}

func (m *CallRequest_CompletionCallback) GetCallback() isCallRequest_CompletionCallback_Callback {
	if m != nil {
		return m.Callback
	}
	return nil
}

func (x *CallRequest_CompletionCallback) GetHttp() *CallRequest_CompletionCallback_Http {
	if x, ok := x.GetCallback().(*CallRequest_CompletionCallback_Http_); ok {
		return x.Http
	}
	return nil
}

type isCallRequest_CompletionCallback_Callback interface {
	isCallRequest_CompletionCallback_Callback()
}

type CallRequest_CompletionCallback_Http_ struct {
	Http *CallRequest_CompletionCallback_Http `protobuf:"bytes,1,opt,name=http,proto3,oneof"`
}

func (*CallRequest_CompletionCallback_Http_) isCallRequest_CompletionCallback_Callback() {}

// HTTP details for the callback.
//
// NOTES:
// * This obviously lacks any kind of auth details at the moment. Having
//   said that, users are strongly encouraged to embed one-time-use tokens
//   into the URL that are authed when received. This allows URLs to survive
//   authentication rollover.
// * It is particularly notable that this, in itself, could be a Nexus
//   endpoint. That may be one (ugly) way to intercept/alter responses.
type CallRequest_CompletionCallback_Http struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URL to POST the JSON CallResponse POSTed to it.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *CallRequest_CompletionCallback_Http) Reset() {
	*x = CallRequest_CompletionCallback_Http{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexus_backend_v1_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallRequest_CompletionCallback_Http) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallRequest_CompletionCallback_Http) ProtoMessage() {}

func (x *CallRequest_CompletionCallback_Http) ProtoReflect() protoreflect.Message {
	mi := &file_nexus_backend_v1_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallRequest_CompletionCallback_Http.ProtoReflect.Descriptor instead.
func (*CallRequest_CompletionCallback_Http) Descriptor() ([]byte, []int) {
	return file_nexus_backend_v1_service_proto_rawDescGZIP(), []int{5, 1, 0}
}

func (x *CallRequest_CompletionCallback_Http) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type CallResponse_Success struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of operation. If this is ALO_INFO, then the output is an AloInfo
	// proto. This can come from starting an ALO or getting an ALO.
	//
	// NOTES:
	// * Open to clearer ways to represent that the result of an operation is a
	//   start ALO and not just a regular response.
	// * For HTTP, if ALO_INFO, this would also be in a header. Maybe this
	//   should be in metadata anyways?
	ResponseType CallResponse_Success_ResponseType `protobuf:"varint,1,opt,name=response_type,json=responseType,proto3,enum=nexus.backend.v1.CallResponse_Success_ResponseType" json:"response_type,omitempty"`
	// Output for the operation.
	//
	// NOTES:
	// * For HTTP, this is the body.
	// * We are not handling large, streaming inputs at this time
	//   (e.g. streaming a file upload).
	Output []byte `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *CallResponse_Success) Reset() {
	*x = CallResponse_Success{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexus_backend_v1_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallResponse_Success) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallResponse_Success) ProtoMessage() {}

func (x *CallResponse_Success) ProtoReflect() protoreflect.Message {
	mi := &file_nexus_backend_v1_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallResponse_Success.ProtoReflect.Descriptor instead.
func (*CallResponse_Success) Descriptor() ([]byte, []int) {
	return file_nexus_backend_v1_service_proto_rawDescGZIP(), []int{6, 1}
}

func (x *CallResponse_Success) GetResponseType() CallResponse_Success_ResponseType {
	if x != nil {
		return x.ResponseType
	}
	return CallResponse_Success_RESPONSE_TYPE_UNSPECIFIED
}

func (x *CallResponse_Success) GetOutput() []byte {
	if x != nil {
		return x.Output
	}
	return nil
}

type CallResponse_Failure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Arbitrary user-defined code for failure.
	//
	// NOTES:
	// * It seems unreasonable to pre-define a set of codes (HTTP status code?
	//   gRPC status code?). But is there value in a generic representation of
	//   certain types of errors? Should we even have this field?
	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// Error details for the operation.
	//
	// NOTES:
	// * It is understood that opaque error blobs are hard to reason about
	//   generically, but it is important for flexibility. Do we want to be more
	//   strict about error formats? For now, clients must be written to accept
	//   arbitrary types as error output just as they do for success output.
	Output []byte `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *CallResponse_Failure) Reset() {
	*x = CallResponse_Failure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexus_backend_v1_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallResponse_Failure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallResponse_Failure) ProtoMessage() {}

func (x *CallResponse_Failure) ProtoReflect() protoreflect.Message {
	mi := &file_nexus_backend_v1_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallResponse_Failure.ProtoReflect.Descriptor instead.
func (*CallResponse_Failure) Descriptor() ([]byte, []int) {
	return file_nexus_backend_v1_service_proto_rawDescGZIP(), []int{6, 2}
}

func (x *CallResponse_Failure) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CallResponse_Failure) GetOutput() []byte {
	if x != nil {
		return x.Output
	}
	return nil
}

type PollNexusRequestQueueRequest_ServiceMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *PollNexusRequestQueueRequest_ServiceMatch) Reset() {
	*x = PollNexusRequestQueueRequest_ServiceMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexus_backend_v1_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollNexusRequestQueueRequest_ServiceMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollNexusRequestQueueRequest_ServiceMatch) ProtoMessage() {}

func (x *PollNexusRequestQueueRequest_ServiceMatch) ProtoReflect() protoreflect.Message {
	mi := &file_nexus_backend_v1_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollNexusRequestQueueRequest_ServiceMatch.ProtoReflect.Descriptor instead.
func (*PollNexusRequestQueueRequest_ServiceMatch) Descriptor() ([]byte, []int) {
	return file_nexus_backend_v1_service_proto_rawDescGZIP(), []int{7, 1}
}

func (x *PollNexusRequestQueueRequest_ServiceMatch) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_nexus_backend_v1_service_proto protoreflect.FileDescriptor

var file_nexus_backend_v1_service_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x6e, 0x65, 0x78, 0x75, 0x73, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x10, 0x6e, 0x65, 0x78, 0x75, 0x73, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x1a, 0x1c, 0x6e, 0x65, 0x78, 0x75, 0x73, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x91,
	0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x65, 0x78,
	0x75, 0x73, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x22, 0x4f, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6e, 0x65, 0x78, 0x75, 0x73, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x22, 0x14, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4c, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x35, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x65, 0x78, 0x75, 0x73, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x28, 0x0a, 0x0e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x22, 0x96, 0x04, 0x0a, 0x0b, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e,
	0x65, 0x78, 0x75, 0x73, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x68, 0x0a, 0x17, 0x61, 0x6c, 0x6f, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6e, 0x65, 0x78, 0x75, 0x73,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x15, 0x61, 0x6c, 0x6f, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x1a, 0x5d, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x65, 0x78, 0x75, 0x73, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x87, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x4b, 0x0a, 0x04, 0x68, 0x74, 0x74, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6e, 0x65, 0x78, 0x75, 0x73, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x48, 0x00, 0x52, 0x04,
	0x68, 0x74, 0x74, 0x70, 0x1a, 0x18, 0x0a, 0x04, 0x48, 0x74, 0x74, 0x70, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x42, 0x0a,
	0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x22, 0xdc, 0x04, 0x0a, 0x0c, 0x43,
	0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6e,
	0x65, 0x78, 0x75, 0x73, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e, 0x65, 0x78, 0x75, 0x73, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x42, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e, 0x65, 0x78, 0x75,
	0x73, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x48, 0x00, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x1a, 0x5d, 0x0a, 0x0d,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6e, 0x65, 0x78, 0x75, 0x73, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xb8, 0x01, 0x0a, 0x07,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x58, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33,
	0x2e, 0x6e, 0x65, 0x78, 0x75, 0x73, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x3b, 0x0a, 0x0c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53,
	0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x4c, 0x4f, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x10, 0x01, 0x1a, 0x35, 0x0a, 0x07, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x0a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd4, 0x02, 0x0a, 0x1c, 0x50, 0x6f,
	0x6c, 0x6c, 0x4e, 0x65, 0x78, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6e,
	0x65, 0x78, 0x75, 0x73, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x6c, 0x6c, 0x4e, 0x65, 0x78, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6e, 0x65, 0x78, 0x75, 0x73, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x4e, 0x65, 0x78,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x5d, 0x0a,
	0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x6e, 0x65, 0x78, 0x75, 0x73, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x22, 0x0a, 0x0c,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x58, 0x0a, 0x1d, 0x50, 0x6f, 0x6c, 0x6c, 0x4e, 0x65, 0x78, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x37, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x65, 0x78, 0x75, 0x73, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x61, 0x0a, 0x23, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x64, 0x4e, 0x65, 0x78, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x65, 0x78, 0x75, 0x73, 0x2e, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x0a,
	0x24, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x4e, 0x65, 0x78, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x44, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c,
	0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4f, 0x10, 0x02, 0x32, 0xcf, 0x05, 0x0a, 0x0e,
	0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x84,
	0x01, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x27, 0x2e, 0x6e, 0x65, 0x78, 0x75, 0x73, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6e, 0x65, 0x78,
	0x75, 0x73, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22, 0x14, 0x2f, 0x76,
	0x31, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x78, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x6e, 0x65, 0x78, 0x75, 0x73, 0x2e, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6e, 0x65, 0x78,
	0x75, 0x73, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x62, 0x0a, 0x04, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x1d, 0x2e, 0x6e, 0x65, 0x78, 0x75, 0x73, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6e, 0x65, 0x78, 0x75, 0x73, 0x2e, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10,
	0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x63, 0x61, 0x6c, 0x6c,
	0x3a, 0x01, 0x2a, 0x12, 0x9e, 0x01, 0x0a, 0x15, 0x50, 0x6f, 0x6c, 0x6c, 0x4e, 0x65, 0x78, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x2e, 0x2e,
	0x6e, 0x65, 0x78, 0x75, 0x73, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x4e, 0x65, 0x78, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x6e, 0x65, 0x78, 0x75, 0x73, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x4e, 0x65, 0x78, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x70, 0x6f, 0x6c,
	0x6c, 0x3a, 0x01, 0x2a, 0x12, 0xb6, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64,
	0x4e, 0x65, 0x78, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x35, 0x2e, 0x6e, 0x65, 0x78, 0x75, 0x73, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64,
	0x4e, 0x65, 0x78, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6e,
	0x65, 0x78, 0x75, 0x73, 0x2e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x4e, 0x65, 0x78, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1c, 0x2f, 0x76,
	0x31, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x3a, 0x01, 0x2a, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nexus_backend_v1_service_proto_rawDescOnce sync.Once
	file_nexus_backend_v1_service_proto_rawDescData = file_nexus_backend_v1_service_proto_rawDesc
)

func file_nexus_backend_v1_service_proto_rawDescGZIP() []byte {
	file_nexus_backend_v1_service_proto_rawDescOnce.Do(func() {
		file_nexus_backend_v1_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_nexus_backend_v1_service_proto_rawDescData)
	})
	return file_nexus_backend_v1_service_proto_rawDescData
}

var file_nexus_backend_v1_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_nexus_backend_v1_service_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_nexus_backend_v1_service_proto_goTypes = []interface{}{
	(OperationType)(0),                           // 0: nexus.backend.v1.OperationType
	(CallResponse_Success_ResponseType)(0),       // 1: nexus.backend.v1.CallResponse.Success.ResponseType
	(*UpdateServicesRequest)(nil),                // 2: nexus.backend.v1.UpdateServicesRequest
	(*UpdateServicesResponse)(nil),               // 3: nexus.backend.v1.UpdateServicesResponse
	(*GetServicesRequest)(nil),                   // 4: nexus.backend.v1.GetServicesRequest
	(*GetServicesResponse)(nil),                  // 5: nexus.backend.v1.GetServicesResponse
	(*MetadataValues)(nil),                       // 6: nexus.backend.v1.MetadataValues
	(*CallRequest)(nil),                          // 7: nexus.backend.v1.CallRequest
	(*CallResponse)(nil),                         // 8: nexus.backend.v1.CallResponse
	(*PollNexusRequestQueueRequest)(nil),         // 9: nexus.backend.v1.PollNexusRequestQueueRequest
	(*PollNexusRequestQueueResponse)(nil),        // 10: nexus.backend.v1.PollNexusRequestQueueResponse
	(*RespondNexusRequestCompletedRequest)(nil),  // 11: nexus.backend.v1.RespondNexusRequestCompletedRequest
	(*RespondNexusRequestCompletedResponse)(nil), // 12: nexus.backend.v1.RespondNexusRequestCompletedResponse
	nil,                                    // 13: nexus.backend.v1.CallRequest.MetadataEntry
	(*CallRequest_CompletionCallback)(nil), // 14: nexus.backend.v1.CallRequest.CompletionCallback
	(*CallRequest_CompletionCallback_Http)(nil), // 15: nexus.backend.v1.CallRequest.CompletionCallback.Http
	nil,                          // 16: nexus.backend.v1.CallResponse.MetadataEntry
	(*CallResponse_Success)(nil), // 17: nexus.backend.v1.CallResponse.Success
	(*CallResponse_Failure)(nil), // 18: nexus.backend.v1.CallResponse.Failure
	nil,                          // 19: nexus.backend.v1.PollNexusRequestQueueRequest.MetadataEntry
	(*PollNexusRequestQueueRequest_ServiceMatch)(nil), // 20: nexus.backend.v1.PollNexusRequestQueueRequest.ServiceMatch
	(*Service)(nil), // 21: nexus.backend.v1.Service
}
var file_nexus_backend_v1_service_proto_depIdxs = []int32{
	21, // 0: nexus.backend.v1.UpdateServicesRequest.services:type_name -> nexus.backend.v1.Service
	21, // 1: nexus.backend.v1.UpdateServicesResponse.services:type_name -> nexus.backend.v1.Service
	21, // 2: nexus.backend.v1.GetServicesResponse.services:type_name -> nexus.backend.v1.Service
	13, // 3: nexus.backend.v1.CallRequest.metadata:type_name -> nexus.backend.v1.CallRequest.MetadataEntry
	14, // 4: nexus.backend.v1.CallRequest.alo_completion_callback:type_name -> nexus.backend.v1.CallRequest.CompletionCallback
	16, // 5: nexus.backend.v1.CallResponse.metadata:type_name -> nexus.backend.v1.CallResponse.MetadataEntry
	17, // 6: nexus.backend.v1.CallResponse.success:type_name -> nexus.backend.v1.CallResponse.Success
	18, // 7: nexus.backend.v1.CallResponse.failure:type_name -> nexus.backend.v1.CallResponse.Failure
	20, // 8: nexus.backend.v1.PollNexusRequestQueueRequest.services:type_name -> nexus.backend.v1.PollNexusRequestQueueRequest.ServiceMatch
	19, // 9: nexus.backend.v1.PollNexusRequestQueueRequest.metadata:type_name -> nexus.backend.v1.PollNexusRequestQueueRequest.MetadataEntry
	7,  // 10: nexus.backend.v1.PollNexusRequestQueueResponse.request:type_name -> nexus.backend.v1.CallRequest
	8,  // 11: nexus.backend.v1.RespondNexusRequestCompletedRequest.response:type_name -> nexus.backend.v1.CallResponse
	6,  // 12: nexus.backend.v1.CallRequest.MetadataEntry.value:type_name -> nexus.backend.v1.MetadataValues
	15, // 13: nexus.backend.v1.CallRequest.CompletionCallback.http:type_name -> nexus.backend.v1.CallRequest.CompletionCallback.Http
	6,  // 14: nexus.backend.v1.CallResponse.MetadataEntry.value:type_name -> nexus.backend.v1.MetadataValues
	1,  // 15: nexus.backend.v1.CallResponse.Success.response_type:type_name -> nexus.backend.v1.CallResponse.Success.ResponseType
	6,  // 16: nexus.backend.v1.PollNexusRequestQueueRequest.MetadataEntry.value:type_name -> nexus.backend.v1.MetadataValues
	2,  // 17: nexus.backend.v1.BackendService.UpdateServices:input_type -> nexus.backend.v1.UpdateServicesRequest
	4,  // 18: nexus.backend.v1.BackendService.GetServices:input_type -> nexus.backend.v1.GetServicesRequest
	7,  // 19: nexus.backend.v1.BackendService.Call:input_type -> nexus.backend.v1.CallRequest
	9,  // 20: nexus.backend.v1.BackendService.PollNexusRequestQueue:input_type -> nexus.backend.v1.PollNexusRequestQueueRequest
	11, // 21: nexus.backend.v1.BackendService.RespondNexusRequestCompleted:input_type -> nexus.backend.v1.RespondNexusRequestCompletedRequest
	3,  // 22: nexus.backend.v1.BackendService.UpdateServices:output_type -> nexus.backend.v1.UpdateServicesResponse
	5,  // 23: nexus.backend.v1.BackendService.GetServices:output_type -> nexus.backend.v1.GetServicesResponse
	8,  // 24: nexus.backend.v1.BackendService.Call:output_type -> nexus.backend.v1.CallResponse
	10, // 25: nexus.backend.v1.BackendService.PollNexusRequestQueue:output_type -> nexus.backend.v1.PollNexusRequestQueueResponse
	12, // 26: nexus.backend.v1.BackendService.RespondNexusRequestCompleted:output_type -> nexus.backend.v1.RespondNexusRequestCompletedResponse
	22, // [22:27] is the sub-list for method output_type
	17, // [17:22] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_nexus_backend_v1_service_proto_init() }
func file_nexus_backend_v1_service_proto_init() {
	if File_nexus_backend_v1_service_proto != nil {
		return
	}
	file_nexus_backend_v1_model_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_nexus_backend_v1_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexus_backend_v1_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexus_backend_v1_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexus_backend_v1_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexus_backend_v1_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetadataValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexus_backend_v1_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexus_backend_v1_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexus_backend_v1_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PollNexusRequestQueueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexus_backend_v1_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PollNexusRequestQueueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexus_backend_v1_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespondNexusRequestCompletedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexus_backend_v1_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespondNexusRequestCompletedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexus_backend_v1_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallRequest_CompletionCallback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexus_backend_v1_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallRequest_CompletionCallback_Http); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexus_backend_v1_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallResponse_Success); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexus_backend_v1_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallResponse_Failure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexus_backend_v1_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PollNexusRequestQueueRequest_ServiceMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_nexus_backend_v1_service_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*CallResponse_Success_)(nil),
		(*CallResponse_Failure_)(nil),
	}
	file_nexus_backend_v1_service_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*CallRequest_CompletionCallback_Http_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nexus_backend_v1_service_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_nexus_backend_v1_service_proto_goTypes,
		DependencyIndexes: file_nexus_backend_v1_service_proto_depIdxs,
		EnumInfos:         file_nexus_backend_v1_service_proto_enumTypes,
		MessageInfos:      file_nexus_backend_v1_service_proto_msgTypes,
	}.Build()
	File_nexus_backend_v1_service_proto = out.File
	file_nexus_backend_v1_service_proto_rawDesc = nil
	file_nexus_backend_v1_service_proto_goTypes = nil
	file_nexus_backend_v1_service_proto_depIdxs = nil
}
