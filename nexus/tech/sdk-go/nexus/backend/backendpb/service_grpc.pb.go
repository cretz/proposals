// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: nexus/backend/v1/service.proto

package backendpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BackendServiceClient is the client API for BackendService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackendServiceClient interface {
	// Update the set of known services on the backend. This can be used to
	// replace or just add/remove services. The entire call will succeed or fail.
	//
	// NOTES:
	// * User would be a Nexus admin, often via CLI or UI.
	// * This is not to be confused with the mapping for the caller backend of
	//   endpoint names to actual endpoints. Rather this is the receiving backend
	//   service. A service must be created before a Nexus call can be made on it.
	UpdateServices(ctx context.Context, in *UpdateServicesRequest, opts ...grpc.CallOption) (*UpdateServicesResponse, error)
	// Get all registered services on this backend.
	//
	// NOTES:
	// * User would be any Nexus caller to this backend. This is basically a
	//   discovery endpoint and in the future may have a more proper spec defining
	//   what operations are available.
	// * There are currently no use cases that justify any kind of filtering here.
	GetServices(ctx context.Context, in *GetServicesRequest, opts ...grpc.CallOption) (*GetServicesResponse, error)
	// Make a Nexus call to this backend.
	//
	// NOTES:
	// * User would be any Nexus caller to this backend.
	// * In the from-Temporal-workflow-to-Temporal use case, this would be invoked
	//   by the caller's Temporal server and received/hosted by the callee
	//   Temporal server.
	// * Due to the fact that long-polling for ALO response is supported, this
	//   call does not necessarily have to be short lived (but it should be).
	Call(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*CallResponse, error)
	// Ask for the next Nexus request to process by a worker. This is a long-poll
	// that may be terminated by the backend after a period of time with no
	// request. Workers are often expected to continually ask for requests and are
	// expected to complete requests relatively quickly.
	//
	// NOTES:
	// * User would be a Nexus worker programmatically.
	// * Consideration was given to using a gRPC stream here, but they are hard to
	//   proxy well and in gRPC/HTTP2 there is essentially no overhead to repeated
	//   calls of this nature over a poll. The only benefit of the stream is the
	//   keep-alive ability. Should we consider streams?
	// * Note, there is no cancellation path. Nexus request/response are expected
	//   to be quick. This is not to be confused with an ALO. A Nexus request
	//   would just _start_ an ALO, never hang while it runs.
	PollNexusRequestQueue(ctx context.Context, in *PollNexusRequestQueueRequest, opts ...grpc.CallOption) (*PollNexusRequestQueueResponse, error)
	// Tell the backend the worker has completed the Nexus request.
	//
	// NOTES:
	// * User would be a Nexus worker programmatically.
	// * Unlike workflow/activity task APIs today, this includes failures
	RespondNexusRequestCompleted(ctx context.Context, in *RespondNexusRequestCompletedRequest, opts ...grpc.CallOption) (*RespondNexusRequestCompletedResponse, error)
}

type backendServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBackendServiceClient(cc grpc.ClientConnInterface) BackendServiceClient {
	return &backendServiceClient{cc}
}

func (c *backendServiceClient) UpdateServices(ctx context.Context, in *UpdateServicesRequest, opts ...grpc.CallOption) (*UpdateServicesResponse, error) {
	out := new(UpdateServicesResponse)
	err := c.cc.Invoke(ctx, "/nexus.backend.v1.BackendService/UpdateServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) GetServices(ctx context.Context, in *GetServicesRequest, opts ...grpc.CallOption) (*GetServicesResponse, error) {
	out := new(GetServicesResponse)
	err := c.cc.Invoke(ctx, "/nexus.backend.v1.BackendService/GetServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) Call(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*CallResponse, error) {
	out := new(CallResponse)
	err := c.cc.Invoke(ctx, "/nexus.backend.v1.BackendService/Call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) PollNexusRequestQueue(ctx context.Context, in *PollNexusRequestQueueRequest, opts ...grpc.CallOption) (*PollNexusRequestQueueResponse, error) {
	out := new(PollNexusRequestQueueResponse)
	err := c.cc.Invoke(ctx, "/nexus.backend.v1.BackendService/PollNexusRequestQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) RespondNexusRequestCompleted(ctx context.Context, in *RespondNexusRequestCompletedRequest, opts ...grpc.CallOption) (*RespondNexusRequestCompletedResponse, error) {
	out := new(RespondNexusRequestCompletedResponse)
	err := c.cc.Invoke(ctx, "/nexus.backend.v1.BackendService/RespondNexusRequestCompleted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackendServiceServer is the server API for BackendService service.
// All implementations must embed UnimplementedBackendServiceServer
// for forward compatibility
type BackendServiceServer interface {
	// Update the set of known services on the backend. This can be used to
	// replace or just add/remove services. The entire call will succeed or fail.
	//
	// NOTES:
	// * User would be a Nexus admin, often via CLI or UI.
	// * This is not to be confused with the mapping for the caller backend of
	//   endpoint names to actual endpoints. Rather this is the receiving backend
	//   service. A service must be created before a Nexus call can be made on it.
	UpdateServices(context.Context, *UpdateServicesRequest) (*UpdateServicesResponse, error)
	// Get all registered services on this backend.
	//
	// NOTES:
	// * User would be any Nexus caller to this backend. This is basically a
	//   discovery endpoint and in the future may have a more proper spec defining
	//   what operations are available.
	// * There are currently no use cases that justify any kind of filtering here.
	GetServices(context.Context, *GetServicesRequest) (*GetServicesResponse, error)
	// Make a Nexus call to this backend.
	//
	// NOTES:
	// * User would be any Nexus caller to this backend.
	// * In the from-Temporal-workflow-to-Temporal use case, this would be invoked
	//   by the caller's Temporal server and received/hosted by the callee
	//   Temporal server.
	// * Due to the fact that long-polling for ALO response is supported, this
	//   call does not necessarily have to be short lived (but it should be).
	Call(context.Context, *CallRequest) (*CallResponse, error)
	// Ask for the next Nexus request to process by a worker. This is a long-poll
	// that may be terminated by the backend after a period of time with no
	// request. Workers are often expected to continually ask for requests and are
	// expected to complete requests relatively quickly.
	//
	// NOTES:
	// * User would be a Nexus worker programmatically.
	// * Consideration was given to using a gRPC stream here, but they are hard to
	//   proxy well and in gRPC/HTTP2 there is essentially no overhead to repeated
	//   calls of this nature over a poll. The only benefit of the stream is the
	//   keep-alive ability. Should we consider streams?
	// * Note, there is no cancellation path. Nexus request/response are expected
	//   to be quick. This is not to be confused with an ALO. A Nexus request
	//   would just _start_ an ALO, never hang while it runs.
	PollNexusRequestQueue(context.Context, *PollNexusRequestQueueRequest) (*PollNexusRequestQueueResponse, error)
	// Tell the backend the worker has completed the Nexus request.
	//
	// NOTES:
	// * User would be a Nexus worker programmatically.
	// * Unlike workflow/activity task APIs today, this includes failures
	RespondNexusRequestCompleted(context.Context, *RespondNexusRequestCompletedRequest) (*RespondNexusRequestCompletedResponse, error)
	mustEmbedUnimplementedBackendServiceServer()
}

// UnimplementedBackendServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBackendServiceServer struct {
}

func (UnimplementedBackendServiceServer) UpdateServices(context.Context, *UpdateServicesRequest) (*UpdateServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServices not implemented")
}
func (UnimplementedBackendServiceServer) GetServices(context.Context, *GetServicesRequest) (*GetServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServices not implemented")
}
func (UnimplementedBackendServiceServer) Call(context.Context, *CallRequest) (*CallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (UnimplementedBackendServiceServer) PollNexusRequestQueue(context.Context, *PollNexusRequestQueueRequest) (*PollNexusRequestQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PollNexusRequestQueue not implemented")
}
func (UnimplementedBackendServiceServer) RespondNexusRequestCompleted(context.Context, *RespondNexusRequestCompletedRequest) (*RespondNexusRequestCompletedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RespondNexusRequestCompleted not implemented")
}
func (UnimplementedBackendServiceServer) mustEmbedUnimplementedBackendServiceServer() {}

// UnsafeBackendServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackendServiceServer will
// result in compilation errors.
type UnsafeBackendServiceServer interface {
	mustEmbedUnimplementedBackendServiceServer()
}

func RegisterBackendServiceServer(s grpc.ServiceRegistrar, srv BackendServiceServer) {
	s.RegisterService(&BackendService_ServiceDesc, srv)
}

func _BackendService_UpdateServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).UpdateServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nexus.backend.v1.BackendService/UpdateServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).UpdateServices(ctx, req.(*UpdateServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_GetServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).GetServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nexus.backend.v1.BackendService/GetServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).GetServices(ctx, req.(*GetServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nexus.backend.v1.BackendService/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).Call(ctx, req.(*CallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_PollNexusRequestQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PollNexusRequestQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).PollNexusRequestQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nexus.backend.v1.BackendService/PollNexusRequestQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).PollNexusRequestQueue(ctx, req.(*PollNexusRequestQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_RespondNexusRequestCompleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RespondNexusRequestCompletedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).RespondNexusRequestCompleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nexus.backend.v1.BackendService/RespondNexusRequestCompleted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).RespondNexusRequestCompleted(ctx, req.(*RespondNexusRequestCompletedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BackendService_ServiceDesc is the grpc.ServiceDesc for BackendService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BackendService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nexus.backend.v1.BackendService",
	HandlerType: (*BackendServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateServices",
			Handler:    _BackendService_UpdateServices_Handler,
		},
		{
			MethodName: "GetServices",
			Handler:    _BackendService_GetServices_Handler,
		},
		{
			MethodName: "Call",
			Handler:    _BackendService_Call_Handler,
		},
		{
			MethodName: "PollNexusRequestQueue",
			Handler:    _BackendService_PollNexusRequestQueue_Handler,
		},
		{
			MethodName: "RespondNexusRequestCompleted",
			Handler:    _BackendService_RespondNexusRequestCompleted_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nexus/backend/v1/service.proto",
}
